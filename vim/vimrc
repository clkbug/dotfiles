" vim settings
set tabstop=4
" set autoindent
set cindent
set expandtab
set shiftwidth=4
set number
set ruler
set display=lastline
set pumheight=10
" set list
" set listchars=tab:>-,trail:-,nbsp:%,extends:>,precedes:<
set incsearch
set hlsearch
set wrap
set showmatch
set matchtime=1
set whichwrap=h,l
set wrapscan
set ignorecase
set smartcase
set hidden
set history=2000
set showmode
set showcmd
set nobackup
set noswapfile
set autoread
syntax on


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim-plug
if has('vim_starting')
    set rtp+=~/.vim/plugged/vim-plug
    if !isdirectory(expand('~/.vim/plugged/vim-plug'))
        echo 'install vim-plug...'
        call system('mkdir -p ~/.vim/plugged/vim-plug')
        call system('git clone https://github.com/junegunn/vim-plug.git ~/.vim/plugged/vim-plug/autoload')
    end
endif

call plug#begin('~/.vim/plugged')
    Plug 'junegunn/vim-plug', {'dir': '~/.vim/plugged/vim-plug/autoload'}

    Plug 'scrooloose/syntastic'
    Plug 'Shougo/vimproc.vim', {'do': 'make'}
    Plug 'kana/vim-operator-user'
    Plug 'tyru/caw.vim'
    Plug 'rickhowe/diffchar.vim'
    
call plug#end()


""""""""" syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

""""""""" caw.vim
" C-c でコメントアウト
nmap <C-c> <Plug>(caw:I:toggle)
vmap <C-c> <Plug>(caw:I:toggle)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" set cursorline
" hi CursorLineNr term=bold cterm=NONE ctermfg=203 ctermbg=NONE
" hi clear CursorLine

autocmd ColorScheme * highlight LineNr ctermfg=255
colorscheme desert

nnoremap <ESC><ESC> :nohl<Return>

" escape from insert mode
inoremap <silent> jj <ESC>
inoremap <silent> kk <ESC>

" cursor moving in insert mode
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-h> <Left>
inoremap <C-l> <Right>
inoremap <C-e><C-a> <ESC>I
inoremap <C-e><C-e> <ESC>A


" TAB settings
" {{{
" Anywhere SID.
function! s:SID_PREFIX()
  return matchstr(expand('<sfile>'), '<SNR>\d\+_\zeSID_PREFIX$')
endfunction

" Set tabline.
function! s:my_tabline()  "{{{
  let s = ''
  for i in range(1, tabpagenr('$'))
    let bufnrs = tabpagebuflist(i)
    let bufnr = bufnrs[tabpagewinnr(i) - 1]  " first window, first appears
    let no = i  " display 0-origin tabpagenr.
    let mod = getbufvar(bufnr, '&modified') ? '!' : ' '
    let title = fnamemodify(bufname(bufnr), ':t')
    let title = '[' . title . ']'
    let s .= '%'.i.'T'
    let s .= '%#' . (i == tabpagenr() ? 'TabLineSel' : 'TabLine') . '#'
    let s .= no . ':' . title
    let s .= mod
    let s .= '%#TabLineFill# '
  endfor
  let s .= '%#TabLineFill#%T%=%#TabLine#'
  return s
endfunction "}}}
let &tabline = '%!'. s:SID_PREFIX() . 'my_tabline()'
set showtabline=2 " 常にタブラインを表示

" The prefix key.
nnoremap    [Tag]   <Nop>
nmap    t [Tag]
" Tab jump
for n in range(1, 9)
  execute 'nnoremap <silent> [Tag]'.n  ':<C-u>tabnext'.n.'<CR>'
endfor
" t1 で1番左のタブ、t2 で1番左から2番目のタブにジャンプ

map <silent> [Tag]c :tablast <bar> tabnew<CR>
" tc 新しいタブを一番右に作る
map <silent> [Tag]x :tabclose<CR>
" tx タブを閉じる
map <silent> [Tag]n :tabnext<CR>
" tn 次のタブ
map <silent> [Tag]p :tabprevious<CR>
" tp 前のタブ
" }}}
